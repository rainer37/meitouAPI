service: meitou
#app: your-app-name
#org: your-org-name

frameworkVersion: '2'

custom:
  currentStage: ${opt:stage, self:provider.stage}
  lambdaRunTime: python3.8
  userPoolName: users-#{AWS::AccountId}-${self:custom.currentStage}
  userPoolDomain: meitou-users-#{AWS::AccountId}-${self:custom.currentStage}
  channelTable: channels-#{AWS::AccountId}-${self:custom.currentStage}
  dynamoDefaultRoleName: dynamoDefaultRole-#{AWS::AccountId}-${self:custom.currentStage}

provider:
  name: aws
  runtime: ${self:custom.lambdaRunTime}
  iamManagedPolicies:
    - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  stage: dev
  region: us-west-2
  timeout: 28
  environment:
    CHANNEL_TABLE: ${self:custom.channelTable}
    REGION: ${self:provider.region}

plugins:
  - serverless-pseudo-parameters

# packaging information
package:
  individually: true
  exclude:
    - "lib/**"
    - "node_modules/**"
    - "Makefile"
    - "package-lock.json"
    - "python-packages.txt"
    - "README.md"

layers:
  pythonPackageLayer:
    path: lib
    name: Python-Package-layer
    description: Python Package layer for general dependency code. ex. boto3
    compatibleRuntimes:
      - ${self:custom.lambdaRunTime}

functions:
  ws_connect:
    handler: func/chat/connect.handler
    events:
      - websocket: $connect
    layers:
      - { Ref: PythonPackageLayerLambdaLayer }

  ws_disconnect:
    handler: func/chat/disconnect.handler
    events:
      - websocket: $disconnect
    layers:
      - { Ref: PythonPackageLayerLambdaLayer }

  ws_on_message:
    handler: func/chat/onmessage.handler
    events:
      - websocket: onMessage
    layers:
      - { Ref: PythonPackageLayerLambdaLayer }

  hello:
    handler: handler.hello
    layers:
      - { Ref: PythonPackageLayerLambdaLayer }

  channel_list:
    handler: func/channel/list.handler
    role:
      - DynamoRoleDefault
    layers:
      - { Ref: PythonPackageLayerLambdaLayer }

  channel_get:
    handler: func/channel/get.handler
    role:
      - DynamoRoleDefault
    layers:
      - { Ref: PythonPackageLayerLambdaLayer }
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    ChannelTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.channelTable}
        AttributeDefinitions:
          - AttributeName: channel_id
            AttributeType: S
          - AttributeName: channel_sk
            AttributeType: S
        KeySchema:
          - AttributeName: channel_id
            KeyType: HASH
          - AttributeName: channel_sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
    
    UserPoolDomain: 
      Type: AWS::Cognito::UserPoolDomain 
      Properties:
        UserPoolId: !Ref UserPool 
        Domain: ${self:custom.userPoolDomain}

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes: 
          - email

    DynamoRoleDefault:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.dynamoDefaultRoleName}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "dynamodb:*"
                  Resource:
                    - Fn::GetAtt:
                      - ChannelTable
                      - Arn
